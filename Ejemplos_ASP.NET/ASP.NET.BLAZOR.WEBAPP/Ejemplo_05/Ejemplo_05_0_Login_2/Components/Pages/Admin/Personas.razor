@page "/admin/personas"
@layout AdminLayout

@attribute [Authorize]
@rendermode InteractiveServer

@* cuando se depende de asincronos *@
@attribute [StreamRendering]

@using Ejemplo_05_0_Login_2.Components.Layout
@using Ejemplo_05_0_Login_2.Models
@using Ejemplo_05_0_Login_2.Services
@using Microsoft.AspNetCore.Authorization

@inject PersonasService _personasService


@inject NavigationManager NavManager


@if (isLoading==true)
{
    <div><em>Loading...</em></div>
}
else
{
    <section class="section">
        <div class="row">
            <div class="col-lg-6">

                <div class="card">
                    <div class="card-body">

                        @if (isVisibleFormDetailRegistro == true)
                        {
                            <h5 class="card-title">Detalle del Registro de persona</h5>

                            @if (personas is null)
                            {
                                <p><em>Loading...</em></p>
                            }
                            else
                            {
                                <dl class="row">

                                    <dt class="col-sm-2">Id</dt>
                                    <dd class="col-sm-10">@Model?.Id</dd>

                                    <dt class="col-sm-2">DNI</dt>
                                    <dd class="col-sm-10">@Model?.DNI</dd>

                                    <dt class="col-sm-2">Nombre</dt>
                                    <dd class="col-sm-10">@Model?.Nombre</dd>

                                    <dt class="col-sm-2">FechaNacimiento</dt>
                                    <dd class="col-sm-10">@Model?.FechaNacimiento</dd>
                                </dl>
                                <div>
                                    <button class="link-button" @onclick="() => viewFormEditRegistro(Model.Id)"><i class="fa-solid fa-pen"></i></button>
                                </div>
                            }

                        }
                        else if (isVisibleFormCreateRegistro == true)
                        {

                            <h5 class="card-title">Alta de Registro de persona</h5>


                            <EditForm method="post" Model="Model" OnValidSubmit="onCreatePersona" FormName="FormCreate" Enhance>

                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" role="alert" />

                                <div class="mb-3">
                                    <label for="id" class="form-label">Id:</label>
                                    <InputNumber id="id" @bind-Value="Model.Id" class="form-control" aria-required="true" />
                                    <ValidationMessage For="() => Model.Id" class="text-danger" />
                                </div>
                                <div class="mb-3">
                                    <label for="nombre" class="form-label">Nombre:</label>
                                    <InputText id="nombre" @bind-Value="Model.Nombre" class="form-control" />
                                    <ValidationMessage For="() => Model.Nombre" class="text-danger" />
                                </div>
                                <div class="mb-3">
                                    <label for="dni" class="form-label">DNI:</label>
                                    <InputNumber id="dni" @bind-Value="Model.DNI" class="form-control" />
                                    <ValidationMessage For="() => Model.DNI" class="text-danger" />
                                </div>
                                <div class="mb-3">
                                    <label for="fechaNacimiento" class="form-label">Fecha de Nacimiento:</label>
                                    <InputDate id="fechaNacimiento" @bind-Value="Model.FechaNacimiento" class="form-control" />
                                    <ValidationMessage For="() => Model.FechaNacimiento" class="text-danger" />
                                </div>
                                <button type="submit" class="btn btn-primary">Create</button>
                            </EditForm>

                        }
                        else if (isVisibleFormEditRegistro == true)
                        {

                            <h5 class="card-title">Alta de Registro de persona</h5>
                            <EditForm method="post" Model="Model" OnValidSubmit="onEditPersona" FormName="FormEdit" Enhance>

                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" role="alert" />

                                <div class="mb-3">
                                    <label for="id" class="form-label">Id:</label>
                                    <InputNumber id="id" @bind-Value="Model.Id" class="form-control" aria-required="true" />
                                    <ValidationMessage For="() => Model.Id" class="text-danger" />
                                </div>
                                <div class="mb-3">
                                    <label for="nombre" class="form-label">Nombre:</label>
                                    <InputText id="nombre" @bind-Value="Model.Nombre" class="form-control" />
                                    <ValidationMessage For="() => Model.Nombre" class="text-danger" />
                                </div>
                                <div class="mb-3">
                                    <label for="dni" class="form-label">DNI:</label>
                                    <InputNumber id="dni" @bind-Value="Model.DNI" class="form-control" />
                                    <ValidationMessage For="() => Model.DNI" class="text-danger" />
                                </div>
                                <div class="mb-3">
                                    <label for="fechaNacimiento" class="form-label">Fecha de Nacimiento:</label>
                                    <InputDate id="fechaNacimiento" @bind-Value="Model.FechaNacimiento" class="form-control" />
                                    <ValidationMessage For="() => Model.FechaNacimiento" class="text-danger" />
                                </div>
                                <button type="submit" class="btn btn-primary">Guardar cambios</button>
                            </EditForm>
                        }
                    </div>
                </div>

            </div>
        </div>
    </section>


    <section class="section text-center">
        <div class="row">
            <div class="col-lg-12">

                <div class="card">
                    <div class="card-body">
                        <p>
                            <button class="link-button" @onclick="() => viewFormCreateRegistro()"><i class="fa-solid fa-pen"></i></button>
                        </p>

                        @if (personas == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else
                        {
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Id</th>
                                        <th>DNI</th>
                                        <th>Nombre</th>
                                        <th>Fecha Nacimiento</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in personas)
                                    {
                                        <tr>
                                            <td>@item.Id</td>
                                            <td>@item.DNI</td>
                                            <td>@item.Nombre</td>
                                            <td>@item.FechaNacimiento?.ToShortDateString()</td>
                                            <td>
                                                <button class="link-button" @onclick="() => viewFormEditRegistro(item.Id)"><i class="fa-solid fa-pen"></i></button>
                                                <button class="link-button" @onclick="() => viewFormDetailRegistro(item.Id)"><i class="fa-solid fa-expand"></i></button>|
                                                <button class="link-button" @onclick="() => onEliminarPersona(item.Id)"><i class="fa-solid fa-trash"></i></button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }

                    </div>
                </div>
            </div>
        </div>
    </section>
}


@code
{
    private bool isLoading = true;

    [SupplyParameterFromForm]
    private PersonaModel? Model { get; set; }

    private List<PersonaModel>? personas { get; set; } = new();

    private bool isVisibleFormDetailRegistro;
    private bool isVisibleFormCreateRegistro;
    private bool isVisibleFormEditRegistro;

    //private PersonasService _personasService = new();
    // [Inject] 
    // PersonasService _personasService;


    protected override async Task OnInitializedAsync()
    {
        Model ??= new PersonaModel() { };

        //aquí no me funcionó
        //s1
        personas = await _personasService.GetAll();

        isLoading = false;
        StateHasChanged();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //   //  isLoading = false;
    // }
    // //s1 agregue este evento
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender && !_isLoaded)
    //     {
    //         personas = await _personasService.GetAll();
    //         _isLoaded = true;
    //         StateHasChanged(); // Notifica al componente que debe volver a renderizarse
    //     }
    // }

    async protected Task viewFormEditRegistro(int? id)
    {
        isVisibleFormCreateRegistro = false;
        isVisibleFormEditRegistro = true;
        isVisibleFormDetailRegistro = false;
        Model = await _personasService.GetById((int)id);
    }

    async protected Task viewFormDetailRegistro(int? id)
    {
        isVisibleFormCreateRegistro = false;
        isVisibleFormEditRegistro = false;
        isVisibleFormDetailRegistro = true;
        Model = await _personasService.GetById((int)id);
    }

    protected void viewFormCreateRegistro()
    {
        isVisibleFormCreateRegistro = true;
        isVisibleFormEditRegistro = false;
        isVisibleFormDetailRegistro = false;
        Model = new();
    }


    private async Task onCreatePersona()
    {
        Model.FechaNacimiento = DateTime.Now;
        await _personasService.CrearNuevo(Model);
        personas.Add(Model);

        await viewFormDetailRegistro(Model.Id);
    }

    private async Task onEditPersona()
    {
        try
        {
            await _personasService.Actualizar(Model);

            await viewFormDetailRegistro(Model.Id);
        }
        catch (Exception e)
        {

        }
    }

    async private Task onEliminarPersona(int? id)
    {
        await _personasService.Eliminar((int)id);
        personas = await _personasService.GetAll();
    }
}