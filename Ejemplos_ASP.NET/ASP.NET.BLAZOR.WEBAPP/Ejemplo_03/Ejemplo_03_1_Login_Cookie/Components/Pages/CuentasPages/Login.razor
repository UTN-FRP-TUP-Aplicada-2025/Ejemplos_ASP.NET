@page "/login"

@layout LoginLayout

@using Ejemplo_03_1_Login_Cookie.Components.Layout
@using Ejemplo_03_1_Login_Cookie.Models
@using Ejemplo_03_1_Login_Cookie.Services

@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@* 
@inject NavigationManager Navigation *@

@* necesario para el acceso al contexto *@
@using Microsoft.AspNetCore.Authentication
@* @inject IHttpContextAccessor HttpContextAccessor *@

@* @rendermode InteractiveServer *@


<PageTitle>Login</PageTitle>

<h2>Usuario</h2>

<hr />

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Model" OnValidSubmit="onValidarLogin" FormName="LoginForm">

            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="id" class="form-label">Usuario:</label>
                <InputText id="id" @bind-Value="Model.Nombre" class="form-control" aria-required="true" />
                <ValidationMessage For="() =>  Model.Nombre" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="clave" class="form-label">Clave:</label>
                <InputText id="clave" @bind-Value="Model.Clave" class="form-control" type="password" />
                <ValidationMessage For="() => Model.Clave" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
    </div>


    <div>@errorMessages</div>
</div>

@* 
@code {
    [SupplyParameterFromForm]
    private UsuarioModel Model { get; set; } = new(); // Probablemente necesites adaptar esto a tu modelo de login

    private string? errorMessages;

    [Inject]
    private SignInManager<ApplicationUser> SignInManager { get; set; }

    [Inject]
    private NavigationManager Navigation { get; set; }

    async private Task onValidarLogin()
    {
        try
        {
            var result = await SignInManager.PasswordSignInAsync(Model.Nombre, Model.Clave, false, lockoutOnFailure: false); // Ajusta los parámetros según tu modelo y necesidades

            if (result.Succeeded)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessages = "Usuario o contraseña no válidos.";
            }
        }
        catch (Exception ex)
        {

            errorMessages = ex.Message + "|" + ex.StackTrace.ToString();
        }
    }

}
*@

@code {

    [SupplyParameterFromForm]
    private UsuarioModel Model { get; set; } = new();

    [Inject] private UsuariosService _usuarioService { get; set; }

    private string? errorMessages;

    [Inject]
    private NavigationManager Navigation { get; set; }

    [Inject]
    private IHttpContextAccessor HttpContextAccessor { get; set; }

    async private Task onValidarLogin()
    {
        if (await _usuarioService.VerificarLogin(Model) == false)
        {
            errorMessages = " Usuario o Contraseña no válidos!";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.Nombre)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
            Navigation.NavigateTo("/"); // Redirigir para que la cookie se establezca en la nueva respuesta
        }
        else
        {
            errorMessages = "No se pudo iniciar sesión debido a un error interno.";
        }
    }
}
