@page "/admin/login"
@layout LoginLayout

@* si habilito esto falla cuando quiero autenticarme con cookie - onLogin() *@
@* @rendermode InteractiveServer *@

@using Ejemplo_05_0_Integracion.Components.Layout
@using Ejemplo_05_0_Integracion.Models
@using Ejemplo_05_0_Integracion.Services

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@inject NavigationManager Navigation

@* necesario para el acceso al contexto *@
@using Microsoft.AspNetCore.Authentication
@inject IHttpContextAccessor HttpContextAccessor

@* @rendermode InteractiveServer *@

<PageTitle>Login</PageTitle>



<section class="section register min-vh-100 d-flex flex-column align-items-center justify-content-center py-4">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-4 col-md-6 d-flex flex-column align-items-center justify-content-center">

                <div class="d-flex justify-content-center py-4">
                    <a href="index.html" class="logo d-flex align-items-center w-auto">
                        <img src="assets/img/logo.png" alt="">
                        <span class="d-none d-lg-block">NiceAdmin</span>
                    </a>
                </div><!-- End Logo -->

                <EditForm method="post" Model="Model" OnValidSubmit="onValidarLogin" FormName="LoginForm" Enhance>

                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                    <div class="card mb-3">

                        <div class="card-body">

                            <div class="pt-4 pb-2">
                                <h5 class="card-title text-center pb-0 fs-4">Accede a tu cuenta</h5>
                                <p class="text-center small">Entra el usuario y clave de cuenta</p>
                            </div>

                            <form class="row g-3 needs-validation" novalidate>

                                <div class="col-12">
                                    <label for="usuario" class="form-label">Usuario</label>
                                    <div class="input-group has-validation">
                                        <span class="input-group-text" id="inputGroupPrepend">@@</span>
                                        @* <input type="text" name="username" class="form-control" id=""usuario" required> *@
                                        <InputText id="usuario" @bind-Value="Model.Nombre" class="form-control" aria-required="true" />
                                        <ValidationMessage For="() =>  Model.Nombre" class="text-danger" />
                                        <div class="invalid-feedback">Please enter your username.</div>
                                    </div>
                                </div>

                                <div class="col-12">
                                    <label for="clave" class="form-label">Clave</label>
                                    @*  <input type="password" name="password" class="form-control" id="clave" required> *@
                                    <InputText id="clave" @bind-Value="Model.Clave" class="form-control" type="password" />
                                    <ValidationMessage For="() => Model.Clave" class="text-danger" />
                                    <div class="invalid-feedback">Please enter your password!</div>
                                </div>

                                <div class="col-12">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="remember" value="true" id="rememberMe">
                                        <label class="form-check-label" for="rememberMe">Remember me</label>
                                    </div>
                                </div>
                                <div class="col-12">
                                    @*   <button class="btn btn-primary w-100" type="submit">Login</button> *@
                                    <button type="submit" class="btn btn-primary w-100">Login</button>
                                </div>
                                <div class="col-12">
                                    <p class="small mb-0">Don't have account? <a href="pages-register.html">Create an account</a></p>
                                </div>
                            </form>

                        </div>
                    </div>
                </EditForm>

                <div class="credits">
                    <!-- All the links in the footer should remain intact. -->
                    <!-- You can delete the links only if you purchased the pro version. -->
                    <!-- Licensing information: https://bootstrapmade.com/license/ -->
                    <!-- Purchase the pro version with working PHP/AJAX contact form: https://bootstrapmade.com/nice-admin-bootstrap-admin-html-template/ -->
                    Designed by <a href="https://bootstrapmade.com/">BootstrapMade</a>
                </div>

            </div>
        </div>
    </div>

</section>




<h2>Usuario</h2>

<hr />


@code {
    // [CascadingParameter]
    // public HttpContext? httpContext { get; set; }

    [SupplyParameterFromForm]
    private UsuarioModel Model { get; set; } = new();

    private UsuariosService _usuarioService = new UsuariosService();


    private string? errorMessages;

    async private Task onValidarLogin()
    {
        if (await _usuarioService.VerificarLogin(Model) == false)
        {
            errorMessages = " Usuario o Contraseña no válidos!";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.Nombre),
            new Claim("CUIT", "23244324") // claim personalizada
        };

        var identity = new ClaimsIdentity(claims, "Cookies");
        var principal = new ClaimsPrincipal(identity);

        // Acceder a HttpContext a través de IHttpContextAccessor
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            await httpContext.SignInAsync("Cookies", principal);
            Navigation.NavigateTo("/admin/personas", forceLoad: true);
        }
        else
        {
            errorMessages = "No se pudo iniciar sesión debido a un error interno.";
        }

    }
}
