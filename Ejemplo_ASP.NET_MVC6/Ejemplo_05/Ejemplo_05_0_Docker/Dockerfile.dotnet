# etapa: construcción
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build

USER root
RUN apt-get update 
RUN apt-get install -y gss-ntlmssp krb5-user libkrb5-dev openssl libssl-dev libgssapi-krb5-2 libkrb5-3

RUN apt-get install -y iputils-ping

RUN rm -rf /var/lib/apt/lists/*

ARG SOLUTION_NAME="Ejemplo_05"
ARG PROJECT_NAME="Ejemplo_05_Areas"
ARG BUILD_ROOT="/src/app_dotnet"
ARG NOMBRE_DLL="${PROJECT_NAME}.DLL"

ARG BASE_PATH="/workspaces/Ejemplos_ASP.NET_MVC6/Ejemplo_ASP.NET_MVC6"
ARG PROJECT_PATH="${BASE_PATH}/${SOLUTION_NAME}"

# copiando archivos desde la carpeta actual
# copia el proyecto 1. 
COPY "${PROJECT_NAME}/." "${BUILD_ROOT}/${PROJECT_NAME}/"

WORKDIR $BUILD_ROOT

RUN dotnet add "${PROJECT_NAME}/${PROJECT_NAME}.csproj" package Microsoft.Data.SqlClient

RUN dotnet clean ${PROJECT_NAME}

# restaurando dependencias
RUN dotnet restore "${PROJECT_NAME}/${PROJECT_NAME}.csproj"

# compilando
RUN dotnet build "${PROJECT_NAME}/${PROJECT_NAME}.csproj" -c Release -o /app/build

# publicando
RUN dotnet publish "${PROJECT_NAME}/${PROJECT_NAME}.csproj" -c Release -o /app/publish

# etapa: ejecución
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime

# directorio de trabajo del contenedor
WORKDIR /app

# copiando los archivos a publicar
COPY --from=build /app/publish .

# exponiendo el puerto 8080 para acceder - activar el public en forwader port
EXPOSE 8284

# punto de entrada de la aplicación

ENTRYPOINT ["dotnet", "Ejemplo_05_Areas.dll"]

#ENV NOMBRE_DLL="${PROJECT_NAME}.DLL"
#ENTRYPOINT ["dotnet", $NOMBRE_DLL]

#ARG NOMBRE_DLL="${PROJECT_NAME}.DLL"
#ENV NOMBRE_DLL=$NOMBRE_DLL
#ENTRYPOINT ["sh", "-c", "dotnet $NOMBRE_DLL"]