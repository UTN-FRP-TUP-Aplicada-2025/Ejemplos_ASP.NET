@page "/inputmultiplefilesjs"


@inject ILogger<InputMultipleFileSimple> Logger
@inject IWebHostEnvironment Env
@inject IJSRuntime JSRuntime
@using Ejemplo_FileUpload.Components.Pages.no_modulos
@using Microsoft.AspNetCore.Components.Forms
@attribute [StreamRendering]
@rendermode InteractiveServer

<h3>Subir Archivos</h3>
<div class="col">
    <div class="row">
        <InputFile key="@inputFileKey" OnChange="HandleFilesSelection"
                   multiple class="form-control" MaxAllowedSize="100485760" id="fileInput" />
        @if (selectedFiles.Count > 0)
        {
            <button @onclick="UploadFiles" class="btn btn-primary">Subir Archivos</button>
        }
    </div>
    @if (selectedFiles.Count > 0)
    {
        <p>Archivos seleccionados:</p>
        <div id="file-info" class="mt-3">
            @foreach (var file in selectedFiles)
            {
                <div class="d-flex border align-items-center mb-2">
                    <i class="fas fa-file mr-2"></i>
                    <div>@file.Name (Ubicación original: @file.FullPath)</div>
                    <div class="ml-auto">
                        <button @onclick="() => RemoveFile(file.Name)" class="btn btn-link text-danger">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    }
    <p>@message</p>
</div>
<br />

@code {
    private List<FileWrapper> selectedFiles = new();
    private int inputFileKey = 0;
    private string message = "";

    // Custom wrapper class to store additional file information
    private class FileWrapper
    {
        public IBrowserFile File { get; set; }
        public string FullPath { get; set; }
        public string Name => File.Name;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setupFileInputFullPathCapture");
        }
    }

    private async Task HandleFilesSelection(InputFileChangeEventArgs e)
    {
        if (e.GetMultipleFiles() != null)
        {
            // Capture full paths from JavaScript
            var fullPaths = await JSRuntime.InvokeAsync<string[]>("getFileInputFullPaths");

            var nuevosArchivos = e.GetMultipleFiles()
                .Select((file, index) => new FileWrapper
                    {
                        File = file,
                        FullPath = index < fullPaths.Length ? fullPaths[index] : "Ruta no disponible"
                    })
                .Where(wrapper =>
                    !selectedFiles.Any(archivoSeleccionado =>
                        archivoSeleccionado.Name == wrapper.Name));

            selectedFiles.AddRange(nuevosArchivos);
        }
    }

    private void RemoveFile(string fileName)
    {
        selectedFiles.RemoveAll(f => f.Name == fileName);
        inputFileKey++;
    }

    private async Task UploadFiles()
    {
        if (selectedFiles.Count == 0)
        {
            message = "No se han seleccionado archivos.";
            return;
        }
        try
        {
            var uploadPath = Path.Combine(Env.WebRootPath, "upload");
            if (!Directory.Exists(uploadPath))
            {
                Directory.CreateDirectory(uploadPath);
            }

            foreach (var fileWrapper in selectedFiles)
            {
                // Generate a unique filename to prevent overwriting
                var uniqueFileName = $"{Guid.NewGuid()}_{fileWrapper.Name}";
                var filePath = Path.Combine(uploadPath, uniqueFileName);

                await using var stream = new FileStream(filePath, FileMode.Create);
                await fileWrapper.File.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024).CopyToAsync(stream);
            }

            message = $"Se han subido {selectedFiles.Count} archivos correctamente.";
            selectedFiles.Clear();
            inputFileKey++;
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error uploading files");
        }
    }
}

<script>
    window.setupFileInputFullPathCapture = () => 
    {
        const fileInput = document.getElementById('fileInput');
        fileInput.addEventListener('change', (event) => {
            const files = event.target.files;
            window.fullFilePaths = Array.from(files).map(file => file.webkitRelativePath || file.name);
        });
    };

    window.getFileInputFullPaths = () => {
        return window.fullFilePaths || [];
    };
</script>