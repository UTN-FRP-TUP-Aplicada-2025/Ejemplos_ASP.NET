@using static System.Net.WebRequestMethods
@inject IJSRuntime JSRuntime

<div id="dropzone" class="d-flex text-center p-2 m-2" style="width: 100%; height: 100%;"
            @ondragover:preventDefault
            @ondrop:preventDefault
            @ondrop="OnDrop">
    <div class="col">
        <div class="align-items-center" style="background-color: yellow;">
            <i class="fas fa-cloud-upload-alt" style="font-size: 50px;"></i>
            <div>
                <div class="align-items-center">
                    Arrastre los archivos aquí o
                    <InputFile multiple class="d-none" @ref="fileInput" />
                    <a href="#" @onclick:preventDefault @onclick="SelectFilesFromDialog">Elige tus archivos</a>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="file-info" class="mt-3">
    @foreach (var file in selectedFiles)
    {
        <div class="d-flex border align-items-center mb-2">
            <i class="fas fa-file mr-2"></i>
            <div>@file.Name</div>
            <div class="ml-auto">
                <button @onclick="() => RemoveFile(file.Name)" class="btn btn-link text-danger">
                    <i class="fas fa-trash-alt"></i>
                </button>
            </div>
        </div>
    }
</div>

<button id="btnEnviar" @onclick="@UploadFile" class="btn btn-primary mt-3">Enviar</button>

@code {
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private string message = "";

    private InputFile fileInput;

    [Inject] IWebHostEnvironment _env { get; set; }

    private void OnDrop(DragEventArgs e)
    {   
        // if (e.DataTransfer?.Files != null)
        // {
        //     foreach (var file in e.DataTransfer.Files)
        //     {
        //         if (!selectedFiles.Any(f => f.Name == file))
        //         {
        //             selectedFiles.Add(file);
        //         }
        //     }
        //     StateHasChanged();
        // }
    }

    private void SelectFilesFromDialog()
    {
        
    }

    private void RemoveFile(string fileName)
    {
        selectedFiles.RemoveAll(f => f.Name == fileName);
    }

    async private Task UploadFile()
    {
        if (selectedFiles.Count == 0)
        {
            message = "No se han seleccionado archivos.";
            return;
        }

        try
        {
            var uploadPath = Path.Combine(_env.WebRootPath, "upload");
            if (!Directory.Exists(uploadPath))
            {
                Directory.CreateDirectory(uploadPath);
            }

            foreach (var file in selectedFiles)
            {
                var filePath = Path.Combine(uploadPath, file.Name);
                await using var stream = new FileStream(filePath, FileMode.Create);
                await file.OpenReadStream().CopyToAsync(stream);
            }

            message = $"Se han subido {selectedFiles.Count} archivos correctamente.";
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }
}