@page "/login"
@layout LoginLayout

@using Ejemplo_03_2_Login_controller_Cookie.Components.Layout
@using Ejemplo_03_2_Login_controller_Cookie.Models
@using Ejemplo_03_2_Login_controller_Cookie.Services

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@inject NavigationManager Navigation

@* necesario para el acceso al contexto *@
@using Microsoft.AspNetCore.Authentication
@using System.Text.Json
@using System.Text
@inject IHttpContextAccessor HttpContextAccessor

@* @rendermode InteractiveServer *@

@inject HttpClient Http

<PageTitle>Login</PageTitle>

<h2>Usuario</h2>

<hr />

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Model" OnValidSubmit="onValidarLogin" FormName="LoginForm" Enhance>

            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="id" class="form-label">Usuario:</label>
                <InputText id="id" @bind-Value="Model.Nombre" class="form-control" aria-required="true" />
                <ValidationMessage For="() =>  Model.Nombre" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="clave" class="form-label">Clave:</label>
                <InputText id="clave" @bind-Value="Model.Clave" class="form-control" type="password"/>
                <ValidationMessage For="() => Model.Clave" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
    </div>
</div>


@code {
    // [CascadingParameter]
    // public HttpContext? httpContext { get; set; }

    [SupplyParameterFromForm]
    private UsuarioModel Model { get; set; } = new();

    private UsuariosService _usuarioService = new UsuariosService();


    private string? errorMessages;

    async private Task onValidarLogin()
    {
        string apiUrl = $"{Navigation.BaseUri}auth/login";

        var request = new HttpRequestMessage();
        request.Method = HttpMethod.Post;
        request.Content = new StringContent(JsonSerializer.Serialize(Model), Encoding.UTF8, "application/json");
        request.RequestUri = new Uri(apiUrl);

        var response = await Http.SendAsync(request);
        

        if (response.IsSuccessStatusCode)
        { 
            string json = await response.Content.ReadAsStringAsync();
            errorMessages = JsonSerializer.Deserialize<string>(json);
            return;
        }

        StateHasChanged();

    }
}
